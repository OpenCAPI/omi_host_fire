#!/usr/bin/env bash

set -eu

usage() {
    echo "Need to provide design and script to pass to vivado"
    echo $0 "<fire || ice> <script_name> <script_args>"
    exit 1
}

if [[ $# -lt 2 ]] ; then
    usage
fi

# By default we were using 2018.3 and now updated to 2020.2
# Some chips might be stuck on an older version, so override if needed.
#XILINX_VERSION=2018.2
XILINX_VERSION=2018.3.1

CWD=$(dirname $(readlink -f $0))
if [[ "$1" == "fire" ]] ; then
# Choose the board and fpga type
    # Alpha Data cards: xcvu3p-ffvc1517-2-i

    # Apollo Board: xcvu7p
    # export BOARD="apollo"
    # export XILINX_PART="xcvu7p-flvc2104-2-e"
    # export OMI_PORTS="4"

    # VCU128 Board: xcvu37p
    export BOARD="vcu128"
    export XILINX_PART="xcvu37p-fsvh2892-2-e"
    export OMI_PORTS="2"

# Choose the frequency
    # OMI_FREQ is set to 333 for internal logic at 333MHz and OMI links at 21.33GHz
    # OMI_FREQ is set to 400 for internal logic at 400MHz and OMI links at 25.60GHz (still timing closure issues)
    export OMI_FREQ="333"
    # export OMI_FREQ="400"

# Other defined parameters
    export BRD_DIR="$CWD/../fire/src/board/$BOARD"
    export TOP_LEVEL="fire_top"
    export SRC_DIR="$CWD/../fire/src"
    export DLX_DIR="$CWD/../dlx"
    export OUTPUT_PREFIX="$CWD/fire"
    export DESIGN="fire"

elif [[ "$1" == "ice" ]] ; then
    # Gemini Board: xczu19eg
    export XILINX_PART="xczu19eg-ffvc1760-2-i"
    export BRD_DIR="$CWD/../ice/src/board/gemini"

    # Choose the frequency
    export OMI_FREQ="333"

    # Other defined parameters
    export TOP_LEVEL="ice_top"
    export SRC_DIR="$CWD/../ice/src"
    export DLX_DIR="$CWD/../dlx"
    export OUTPUT_PREFIX="$CWD/ice"
    export DESIGN="ice"
else
    echo "First argument must be 'fire' or 'ice'; was '$1'"
    exit 1
fi

if [[ -r $2 ]] ; then
#    export XILINXD_LICENSE_FILE=insert_license_file_server_here
    if ! which vivado 2>/dev/null >/dev/null; then
        export PATH=$PATH:/afs/apd/func/vlsi/cte/tools/xilinx/$XILINX_VERSION/Vivado/$XILINX_VERSION/bin
    fi
    if ! vivado -nolog -nojournal -version | grep -q "Vivado v${XILINX_VERSION} (64-bit)"; then
        echo "Invalid Vivado version; ${XILINX_VERSION} is required"
        exit
    fi

    # Output to a log names after the script name and the script args,
    # with spaces replaced by '_', to tell all the logs apart. If
    # there are no args, delete the last _ so we don't end up with
    # synthesize_.log
    LOGNAME=$(echo "${2%.*} ${@:3}.log" | sed 's/ /_/g' | sed 's/_\.log/.log/g')
    mkdir -p $OUTPUT_PREFIX

    # Color code the different warning levels, and the commented
    # commands, as we print to the screen
    vivado -mode batch -source $2 -nolog -nojournal -tclargs ${@:3} 2>&1 | \
        sed -ue 's/^WARNING.*$/\x1b[33m&\x1b[m/g' | \
        sed -ue 's/^INFO.*$/\x1b[34m&\x1b[m/g' | \
        sed -ue 's/^CRITICAL WARNING.*$/\x1b[45m&\x1b[m/g' | \
        sed -ue 's/^#.*$/\x1b[32m&\x1b[m/g' | \
        sed -ue 's/^ERROR.*$/\x1b[41m&\x1b[m/g' | tee $OUTPUT_PREFIX/$LOGNAME

    # Strip color codes out of the log for reading with an editor
    sed -i -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $OUTPUT_PREFIX/$LOGNAME
else
    echo "Cannot find '$2'"
    exit 1
fi
